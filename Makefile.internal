EXTENSION = provsql
EXTVERSION = $(shell grep default_version $(EXTENSION).control | \
           sed -e "s/default_version[[:space:]]*=[[:space:]]*'\([^']*\)'/\1/")

MODULE_big = provsql
OBJS = $(patsubst %.c,%.o,$(wildcard src/*.c)) $(patsubst %.cpp,%.o,$(wildcard src/*.cpp))

DOCS = $(wildcard doc/*.md)
DATA = sql/$(EXTENSION)--$(EXTVERSION).sql
EXTRA_CLEAN = sql/$(EXTENSION)--$(EXTVERSION).sql

# We want REGRESS to be empty, since we are going to provide a schedule
# of tests. But we want REGRESS to be defined, otherwise installcheck
# does nothing. So we use the following Makefile trick to have a defined
# variable with empty value
EMPTY =
REGRESS = $(EMPTY)
REGRESS_OPTS = --load-extension=plpgsql --inputdir=test --outputdir=$(shell mktemp -d /tmp/tmp.provsqlXXXX) --schedule test/schedule

OS := $(shell uname)
ARCH := $(shell uname -m)


# Additional options for pg_regress can be specified below, e.g., a port
# number with EXTRA_REGRESS_OPTS = --port=5434
EXTRA_REGRESS_OPTS =

all: $(DATA) $(MODULE_big).so test/schedule

$(OBJS): $(wildcard src/*.h)

sql/$(EXTENSION)--$(EXTVERSION).sql: sql/$(EXTENSION).sql
	cp $< $@

ifdef DEBUG
PG_CPPFLAGS += -O0 -g
endif

# Disable JIT code generation, due to various bugs, see in particular
# https://bugs.llvm.org/show_bug.cgi?id=41863
# https://github.com/PierreSenellart/provsql/issues/9
with_llvm = no

# A different pg_config can be specified below, e.g., when different
# PostgreSQL are installed on the same machine
PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) --pgxs)
include $(PGXS)



%.o : %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

ifeq ($(OS), Darwin)
HOMEBREW_PREFIX = $(shell brew --prefix)
BOOST_INSTALL_PATH = $(shell brew --prefix boost)

LINKER_FLAGS += -L$(BOOST_INSTALL_PATH)/lib -L$(HOMEBREW_PREFIX)/lib
ifeq ($(ARCH), arm64)
%.o : %.cpp
	$(CXX) -I$(BOOST_INSTALL_PATH)/include -std=c++17 -Wno-register -fPIC $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<
endif
ifeq ($(ARCH), x86_64)
%.o : %.cpp
	$(CXX) -I/usr/local/include -std=c++17 -Wno-register -fPIC $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<
endif
endif
ifeq ($(OS), Linux)
%.o : %.cpp
	$(CXX) -std=c++17 -Wno-register -fPIC $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<
endif

LINKER_FLAGS += -lstdc++ -lboost_serialization -Wno-lto-type-mismatch

VERSION     = $(shell $(PG_CONFIG) --version | awk '{print $$2}')
PGVER_MAJOR = $(shell echo $(VERSION) | awk -F. '{ print ($$1 + 0) }')

# Ways to pass linker flags have changed in PostgreSQL 16
ifeq ($(shell [ $(PGVER_MAJOR) -ge 16 ]; echo $$?), 0)
CFLAGS_SL_MODULE += $(LINKER_FLAGS)
else
LDFLAGS_SL += $(LINKER_FLAGS)
endif

test/schedule: $(wildcard test/schedule.*)
	cat test/schedule.common > test/schedule
	if [ $(PGVER_MAJOR) -ge 14 ]; then \
		cat test/schedule.14 >> test/schedule; \
	fi

installcheck: test/schedule
